# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Trial1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import warnings

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5 import QtCore
from PyQt5.QtGui import *
import random
from demo import *
from Utils import *
import pandas as pd
from functools import partial
import shutil
import matplotlib.ticker as mtick
import gc
import matplotlib.pyplot as plt
class Ui_MainWindow(object):
    #tool functions
    def __init__(self,customer_id):
        #add exit shortcut
        exitAct = QAction(QIcon('exit.png'), 'Exit', self)
        exitAct.setShortcut('Ctrl+Q')
        exitAct.triggered.connect(qApp.quit)
        #add basic variables and attributes
        self.setWindowTitle("RTM Bank Client")
        self.customer_id=customer_id
        self.succeedbuilding=True
        self.customer_id=customer_id
        self.currency_dic = {'Pound': '£', 'HKD': "HK$", 'Yuan': "¥", 'US Dollar': '$'}
        self.accountlist=accountList(self.customer_id)
        #add a run-once count for later use
        self.run_once=0
        self.run_once_analysis=0
        self.current_time_save = []
        self.account_upper=3
        self.account_lower=0
        print('current customer is '+str(customer_id))
        updateHistory(self.customer_id)


    def init_frame(self):
        return self.mainframe

    class ClickLabel(QLabel):
        clicked = QtCore.pyqtSignal()
        def mousePressEvent(self, event):
            self.clicked.emit()
            QLabel.mousePressEvent(self, event)
    class ClickWidget(QWidget):
        clicked = QtCore.pyqtSignal()
        def mousePressEvent(self, event):
            self.clicked.emit()
            QWidget.mousePressEvent(self, event)
    def setupUi(self, MainWindow):
        self.setWindowTitle('RTM Bank')
        MainWindow.setWindowTitle('RTM Bank')
        self.setStyleSheet("background-color: #8ecae6;")
        # Setting up main window
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1420, 877)
        MainWindow.setAutoFillBackground(True)
        MainWindow.setDocumentMode(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        # add mainFrame
        self.mainframe = QtWidgets.QFrame(self.centralwidget)
        self.mainframe.setGeometry(QtCore.QRect(210, 40, 1161, 771))
        self.mainframe.setAutoFillBackground(False)
        self.mainframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.mainframe.setFrameShadow(QtWidgets.QFrame.Raised)
        self.mainframe.setObjectName("frame")
        self.mainframe.setStyleSheet("background-color:white;border-radius:23px;")
        shadow_main = QGraphicsDropShadowEffect()
        shadow_main.setBlurRadius(10)
        shadow_main.setOffset(5)
        self.mainframe.setGraphicsEffect(shadow_main)
        self.accountframe = QtWidgets.QFrame(self.centralwidget)
        self.transactframe = QtWidgets.QFrame(self.centralwidget)
        self.analysisframe=QtWidgets.QFrame(self.centralwidget)
        self.profileframe=QtWidgets.QFrame(self.centralwidget)
        self.accountframe.hide()
        self.transactframe.hide()
        self.analysisframe.hide()
        self.profileframe.hide()
        
        # add sidebar
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(90, 80, 300, 681))
        self.frame.setAutoFillBackground(False)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.frame.setStyleSheet("background-color:rgb(247,248,253);border-radius:23px;")
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(10)
        shadow.setOffset(5)
        self.frame.setGraphicsEffect(shadow)
        self.font1 = QtGui.QFont()
        self.font1.setFamily("Aqua Grotesque")
        self.font1.setBold(True)

        # add bank title
        self.title = QLabel(self.frame)
        self.title.setWindowFlag(Qt.FramelessWindowHint)
        self.title.setAttribute(Qt.WA_NoSystemBackground)
        self.title.setAttribute(Qt.WA_TranslucentBackground)
        self.title.setGeometry(QtCore.QRect(65,50, 200, 80))
        self.title.setText('RTMBANK')
        self.title.setStyleSheet("font-size:35pt;color:rgb(0,80,245);")
        self.title.setFont(self.font1)

        # add sidebar buttons
        def setup_sidebuttonbackground(index, text):
            gc.collect()
            btn1 = self.ClickLabel(self.frame)
            btn1.setGeometry(QtCore.QRect(30, 150 + index * 60, 240, 40))
            style = '''
                    #btn1 {border-radius:7px;font-size:15pt;font-weight: bold;color:black;
                        qproperty-alignment: 'AlignVCenter | AlignLeft';qproperty-wordWrap: true;background-color: rgb(247,248,253);}
                    #btn1:hover {font-size:15pt;border-radius:7px;font-weight: bold;color:rgb(42,110,245);qproperty-alignment: AlignLeft;background-color:rgb(235,239,253);}  
                '''
            self.font1 = QtGui.QFont()
            self.font1.setFamily("Avenir")
            self.font1.setBold(False)
            self.font1.setWeight(50)
            btn1.setStyleSheet(style)
            btn1.setText('                       ' + text)
            btn1.setObjectName('btn1')
            btn1.setFont(self.font1)
            icon = QtWidgets.QLabel(self.frame)
            icon.setGeometry(QtCore.QRect(60, 150 + 60 * index, 40, 40))
            icon.setScaledContents(True)
            icon.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)
            if index == 0:
                icon_name = 'home'
            elif index == 1:
                icon_name = 'Accounts'
            elif index == 2:
                icon_name = 'Transactions'
            elif index == 3:
                icon_name = 'Investment'
            else:
                icon_name = 'logout'
            self.im = QPixmap("./icons/" + icon_name + ".png")
            icon.setPixmap(self.im.scaled(160, 160, Qt.IgnoreAspectRatio))
            icon.setWindowFlag(Qt.FramelessWindowHint)
            icon.setAttribute(Qt.WA_NoSystemBackground)
            icon.setAttribute(Qt.WA_TranslucentBackground)
            return btn1
        self.btn1 = setup_sidebuttonbackground(0, 'Home')
        self.btn1.clicked.connect(self.setup_homepage)
        self.btn2 = setup_sidebuttonbackground(1, "Account")
        self.btn2.clicked.connect(self.setup_accountpage)
        self.btn3 = setup_sidebuttonbackground(2, "Transactions")
        self.btn3.clicked.connect(self.setup_transactionpage)
        self.btn4 = setup_sidebuttonbackground(3, 'Analysis')
        self.btn4.clicked.connect(self.setup_analysispage)
        self.btn5 = setup_sidebuttonbackground(7, 'Logout')
        self.btn5.clicked.connect(self.logout)

        # add wallet elements
        self.setup_homepage()
        #setup accountframe
        MainWindow.setCentralWidget(self.centralwidget)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    #add frequently used functions
    def init_text(self,name, text, geo, style="font-size:20pt;", font='', frame=''):
        if frame=='':
            frame=self.mainframe
        object = QLabel(frame)
        if font=='':
            self.font1 = QtGui.QFont()
            self.font1.setFamily("Aqua Grotesque")
            self.font1.setBold(False)
            font=self.font1
        object.setGeometry(QtCore.QRect(geo[0], geo[1], geo[2], geo[3]))
        object.setObjectName(name)
        object.setStyleSheet(style)
        object.setText(text)

        object.setFont(font)
        object.setWindowFlag(Qt.FramelessWindowHint)
        object.setAttribute(Qt.WA_NoSystemBackground)
        object.setAttribute(Qt.WA_TranslucentBackground)
        return object
    def draw_Vline(self, object_name, geo, frame, color='silver', width=3):
        object = QtWidgets.QFrame(frame)
        object.setGeometry(QtCore.QRect(geo[0], geo[1], geo[2], width))
        object.setStyleSheet("background-color:" + color + ";")
        object.setMidLineWidth(width)
        object.setFrameShape(QtWidgets.QFrame.VLine)
        object.setFrameShadow(QtWidgets.QFrame.Sunken)
        object.setObjectName(object_name)
        return object
    def draw_Hline(self, object_name, geo, frame, color='silver', width=3):
        object = QtWidgets.QFrame(frame)
        object.setGeometry(QtCore.QRect(geo[0], geo[1], width, geo[2]))
        object.setStyleSheet("background-color:silver")
        object.setLineWidth(width)
        object.setMidLineWidth(width)
        object.setFrameShape(QtWidgets.QFrame.HLine)
        object.setFrameShadow(QtWidgets.QFrame.Sunken)
        object.setObjectName("line")
    # def retranslateUi(self, MainWindow):
    #     _translate = QtCore.QCoreApplication.translate
    #     MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

    def setup_homepage(self):
        gc.collect()
        self.analysisframe.hide()
        self.transactframe.hide()
        self.accountframe.hide()
        self.profileframe.hide()
        for i in range(len(self.mainframe.children())):
            try:
                self.mainframe.children()[i].clear()
            except:
                x=1
        # add wallet title and wallet widgets
        wallet_dic = {}
        wallet_df_columns = ['Transaction ID', 'To', 'From', 'Amount', 'Currency Type', 'Time']
        def set_wallet_frame(index,account_type,account_id):
            wallet = QFrame(self.mainframe)
            wallet.setGeometry(QtCore.QRect(220 + 180 * index, 140, 170, 132))
            wallet.setObjectName('wallet')
            style_wallet_frame = '''
                QFrame {border-radius:7px;background-color:white;border:3px solid rgb(46,169,223);}
                QFrame:hover {background-color:white;border: 5px solid rgb(46,169,223);}
            '''
            wallet.setStyleSheet(style_wallet_frame)
            account_type=account_type.upper()+"\nAccount "+account_id
            acc_type = self.init_text('acc_type', account_type, [10, 5, 150, 80], "font-size:17pt", frame=wallet)
            currency_symbol=self.currency_dic[self.accountlist[index][2]]
            balance_text = currency_symbol + "{:,}".format((int(self.accountlist[index][4])))
            balance = self.init_text('balance', balance_text, [10, 70, 150, 51], 'font-size:16pt;color:black;', frame=wallet)
            # balance = QLabel(wallet)
            # balance.setGeometry(QtCore.QRect(10, 70, 111, 51))
            # balance.setStyleSheet('font-size:20pt;border:0px,color:black;')
            return wallet
        wallet_frame_list=[]
        for i in range(len(accountList(self.customer_id))):
            if i<=2:
                wallet_frame_list.append(set_wallet_frame(i, self.accountlist[i][1],account_id=self.accountlist[i][0]))
                wallet_df = pd.DataFrame(transactionHistory2(self.accountlist[i][0]))
                if len(wallet_df) == 0:
                    wallet_df = pd.DataFrame(columns=wallet_df_columns)
                else:
                    wallet_df.columns = wallet_df_columns
                wallet_dic.update({i: wallet_df})
                wallet_frame_list[i].mousePressEvent = partial(self.frame_popup, wallet_dic[i])

        wallet_title = self.init_text('wallet_title', 'Accounts', [220, 50, 300, 100], "font-size:30pt")




        # greeting user
        from datetime import datetime
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")

        self.current_time_save.append(current_time)

        greeting_height = 150
        if now.hour >= 18:
            greeting_text = 'Good Evening'
        elif now.hour >= 12:
            greeting_text = 'Good Afternoon'
        elif now.hour >= 4:
            greeting_text = 'Good Morning'
        else:
            greeting_text = 'Good Night'

        greetings = self.init_text('greetings', greeting_text + ', ', [850, int(greeting_height), 400, 400],"font-size:30pt;")
        customer_name = self.init_text('customer_name', getFirstname(self.customer_id)+" "+getSurname(self.customer_id)+'!', [850, greeting_height + 50, 400, 400],"font-size:35pt;")

        lastlogintime = self.init_text('last_logintime', 'Last Login: ' + self.current_time_save[0], [850, 280, 400, 400])
        loginhistory = self.init_text('login_history_symbol', 'Latest Login History: ', [850, 310, 400, 400],
                                      "font-size:15pt")

        for i in range(len(loginHistory(self.customer_id))):
            if i<=4:
                self.init_text('login_history_'+str(i),str(loginHistory(self.customer_id)[(i)][0]),[850,335+20*i,400,400],"font-size=15pt")

        # include user photo
        userphoto = self.ClickLabel(self.mainframe)
        userphoto.setGeometry(QtCore.QRect(875, 50, 200, 200))
        userphoto.setScaledContents(True)
        userphoto.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)
        self.im = QPixmap("./user-photo/" + self.customer_id + "_photo.png")
        userphoto.setPixmap(self.im)
        userphoto.clicked.connect(self.setup_profilepage)
        userphoto.raise_()




        balance_trend_title = self.init_text('balance_trend_title', 'Total Balance Trend', [220, 330, 400, 30],
                                             "font-size:30pt")

        # login history
        def draw_balance_trend(customer_id):
            import pandas as pd
            import matplotlib.pyplot as plt
            from matplotlib.ticker import FuncFormatter
            import matplotlib.ticker as mtick
            csfont = {'fontname': 'Aqua Grotesque'}
            hfont = {'fontname': 'Myriad Pro'}
            trend=pd.DataFrame(balanceTrend(self.customer_id)).T
            trend[0]=trend[0].apply(lambda x:pd.to_datetime(x,format="%Y-%m"))
            trend['Monthly Change']=trend[1]/trend[2]
            trend.rename(columns={2:'Total Balance'},inplace=True)
            trend.set_index(0,inplace=True)
            plt.rcParams.update({'font.size': 25})
            fig=plt.figure(figsize=(18,12),dpi=100)
            ax = fig.add_subplot(111)
            # ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:,.2%}'.format(y)))
            plt.plot(trend.index,trend['Total Balance']/1000,linewidth=12,marker='o')
            plt.grid()
            # plt.title('Total Balance Change', **hfont,fontsize=40)
            plt.xlabel('Date',**hfont,fontsize=30)
            plt.ylabel('Total Balance (in thousands)',**hfont,fontsize=30)
            plt.savefig("./temp_image/balance_trend/"+str(self.customer_id)+"_balance_trend.jpg",dpi=100)

        # exit()

        balance_trend_image = QtWidgets.QLabel(self.mainframe)
        balance_trend_image.setGeometry(QtCore.QRect(200, 350, 600, 400))
        balance_trend_image.setScaledContents(True)
        balance_trend_image.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)
        #only generate image for a user once
        while(self.run_once<1):
            try:
                os.remove("./temp_image/balance_trend/"+str(self.customer_id)+"_balance_trend.jpg")
            except:
                x=1
            try:
                draw_balance_trend(self.customer_id)
                self.run_once+=1
            except:
                self.run_once+=1
        try:
            im = QPixmap("./temp_image/balance_trend/"+str(self.customer_id)+"_balance_trend.jpg")
        except:
            draw_balance_trend(self.customer_id)
            im = QPixmap("./temp_image/balance_trend/" + str(self.customer_id) + "_balance_trend.jpg")
        balance_trend_image.setPixmap(im)
        balance_trend_image.setPixmap(im.scaled(3600, 2400, Qt.IgnoreAspectRatio))
        balance_trend_image.setWindowFlag(Qt.FramelessWindowHint)
        balance_trend_image.setAttribute(Qt.WA_NoSystemBackground)
        balance_trend_image.setAttribute(Qt.WA_TranslucentBackground)
        balance_trend_title.raise_()
        #draw seperation line

        # finish home page elements construction
        self.homepage_elements = self.mainframe.children()
        self.mainframe.show()
        self.mainframe.raise_()
        self.frame.raise_()

        self.line1=self.draw_Vline('line_1', [220, 300, 511],self.mainframe)
        self.line2=self.draw_Hline('line_2',[805,50,680],self.mainframe)

    def account_nextpage(self):
        self.account_upper+=4
        self.account_lower+=4
        for i in self.wallet_frame_list:
            try:
                for j in i.children():
                    j.clear()
            except:
                x=1
        self.setup_accountpage()
    def account_lastpage(self):
        if self.account_upper>=4:
            self.account_upper-=4
            self.account_lower-=4
        for i in self.wallet_frame_list:
            try:
                for j in i.children():
                    j.clear()
            except:
                x=1
        self.setup_accountpage()

    def setup_accountpage(self):
        gc.collect()
        self.mainframe.hide()
        self.transactframe.hide()
        self.analysisframe.hide()
        self.profileframe.hide()
        for i in range(len(self.accountframe.children())):
            try:
                self.accountframe.children()[i].clear()
            except:
                x = 1
        self.accountframe.setGeometry(QtCore.QRect(210, 40, 1161, 771))
        self.accountframe.setAutoFillBackground(False)
        self.accountframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.accountframe.setFrameShadow(QtWidgets.QFrame.Raised)
        self.accountframe.setObjectName("accountframe")
        self.accountframe.setStyleSheet("background-color:white;border-radius:23px;")
        shadow_main = QGraphicsDropShadowEffect()
        shadow_main.setBlurRadius(10)
        shadow_main.setOffset(5)
        self.accountframe.setGraphicsEffect(shadow_main)
        self.accountframe.show()
        self.frame.raise_()

        #include wallet frame maximum 5
        def set_wallet_frame(index,account_type,account_id):
            wallet = QFrame(self.accountframe)
            wallet.setGeometry(QtCore.QRect(20+220 + 180 * (index%4), 140, 170, 132))
            wallet.setObjectName('wallet')
            style_wallet_frame = '''
                QFrame {border-radius:7px;background-color:white;border:3px solid rgb(46,169,223);}
                QFrame:hover {background-color:white;border: 5px solid rgb(46,169,223);}
            '''
            wallet.setStyleSheet(style_wallet_frame)
            account_type=account_type.upper()+"\nAccount "+account_id
            acc_type = self.init_text('acc_type', account_type, [10, 5, 150, 80], "font-size:17pt", frame=wallet)
            currency_symbol=self.currency_dic[self.accountlist[index][2]]
            balance_text = currency_symbol + "{:,}".format((int(self.accountlist[index][4])))
            balance = self.init_text('balance', balance_text, [10, 70, 160, 51], 'font-size:16pt;color:black;', frame=wallet)
            # balance = QLabel(wallet)
            # balance.setGeometry(QtCore.QRect(10, 70, 111, 51))
            # balance.setStyleSheet('font-size:20pt;border:0px,color:black;')
            wallet.show()
            return wallet
        wallet_dic={}
        wallet_df_columns=['Transaction ID','To','From','Amount','Currency Type','Time']
        self.wallet_frame_list=[]

        for i in range(len(accountList(self.customer_id))):
            if (i<=self.account_upper)&(i>=self.account_lower):
                account_id=self.accountlist[i][0]
                self.wallet_frame_list.append(set_wallet_frame(i,self.accountlist[i][1],account_id))
                wallet_df=pd.DataFrame(transactionHistory2(account_id))
                if len(wallet_df)==0:
                    wallet_df=pd.DataFrame(columns=wallet_df_columns)
                else:
                     wallet_df.columns=wallet_df_columns
                wallet_df['Time'] = wallet_df['Time'].apply(lambda x: pd.to_datetime(x, format='%Y-%m-%d'))
                wallet_df.sort_values('Time', ascending=False, inplace=True)
                wallet_dic.update({i:wallet_df})
                self.wallet_frame_list[i%4].mousePressEvent=partial(self.frame_popup,wallet_dic[i])
                if i!=len(accountList(self.customer_id))-1:
                    self.draw_Hline('line_3', [20+220 + 180 * i+173, 300, 400], self.accountframe,width=3)
                self.init_text('account_init_date','Create Date: \n'+str(self.accountlist[i][3]),[20+220 + 180 * (i%4)+10,140+132+10,140,132],
                               "font-size:17pt;font-family:Avenir;",frame=self.accountframe)
                if getType(self.accountlist[i][0])!='Investment':
                    self.init_text('account_init_date', 'Recent:' ,
                                   [20+220 + 180 * (i%4) + 10, 282+50, 140, 132],
                                   "font-size:17pt;font-family:Avenir;", frame=self.accountframe)
                else:
                    self.init_text('account_init_date', 'No Transactions',
                                   [20+220 + 180 * (i%4) + 10, 282 + 50, 140, 132],
                                   "font-size:17pt;font-family:Avenir;", frame=self.accountframe)

                for j in range(5):
                    if len(wallet_df)>j:
                        # try:
                        transdate=str(wallet_df['Time'].iloc[j])
                        if wallet_df['From'].iloc[j]==account_id:
                            amount='+'
                        else:
                            amount='-'
                        amount=amount+self.currency_dic[wallet_df['Currency Type'].iloc[j]]+str(wallet_df['Amount'].iloc[j])
                        self.init_text('account_init_date', transdate[:10]+'\n'+amount,
                                       [20+220 + 180 * (i%4) + 10, 282+85+j*45, 140, 132],
                                       "font-size:17pt;font-family:Avenir;", frame=self.accountframe)
                        # except:
                        #     x=1
        wallet_title = self.init_text('wallet_title', 'Account Details', [220, 50, 300, 100], "font-size:30pt",frame=self.accountframe)
        arrow_y_offset=170
        arrow_x_offset=180
        arrow_length=780
        rightarrow = self.ClickLabel(self.accountframe)
        rightarrow.setGeometry(QtCore.QRect(arrow_x_offset+arrow_length, arrow_y_offset, 50, 50))
        rightarrow.setScaledContents(True)
        rightarrow.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)
        im = QPixmap("./icons/right-arrow.png")
        rightarrow.setPixmap(im)
        rightarrow.clicked.connect(self.account_nextpage)
        rightarrow.raise_()
        leftarrow = self.ClickLabel(self.accountframe)
        leftarrow.setGeometry(QtCore.QRect(arrow_x_offset, arrow_y_offset, 50, 50))
        leftarrow.setScaledContents(True)
        leftarrow.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)
        im = QPixmap("./icons/left-arrow.png")
        leftarrow.setPixmap(im)
        leftarrow.clicked.connect(self.account_lastpage)
        leftarrow.raise_()

        for i in range(len(self.accountframe.children())):
            self.accountframe.children()[i].show()


    def setup_transactionpage(self):
        #setup Transaction page mainframe
        self.mainframe.hide()
        self.analysisframe.hide()
        self.accountframe.hide()
        self.profileframe.hide()
        self.transactframe.show()
        self.transactframe.setGeometry(QtCore.QRect(210, 40, 1161, 771))
        self.transactframe.setAutoFillBackground(False)
        self.transactframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.transactframe.setFrameShadow(QtWidgets.QFrame.Raised)
        self.transactframe.setObjectName("accountframe")
        self.transactframe.setStyleSheet("background-color:white;border-radius:23px;")
        shadow_main = QGraphicsDropShadowEffect()
        shadow_main.setBlurRadius(10)
        shadow_main.setOffset(5)
        self.transactframe.setGraphicsEffect(shadow_main)
        self.transactframe.show()
        self.frame.raise_()
        #setup transact_subframe
        self.transact_subframe = QtWidgets.QFrame(self.transactframe)
        self.transact_subframe.setGeometry(QtCore.QRect(540, 80, 550, 650))
        self.transact_subframe.setAutoFillBackground(False)
        self.transact_subframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.transact_subframe.setFrameShadow(QtWidgets.QFrame.Raised)
        self.transact_subframe.setObjectName("transact_subframe")
        self.transact_subframe.setStyleSheet("background-color:rgb(87,200,242);border-radius:30px;")
        shadow_main = QGraphicsDropShadowEffect()
        shadow_main.setBlurRadius(5)
        shadow_main.setOffset(5)
        self.transact_subframe.setGraphicsEffect(shadow_main)
        frequent_contact_title = self.init_text('Frequent_contact', 'Frequent Contacts:', [250, 50, 300, 50],
                                                "font-size:25px; font-family:Aqua Grotesque;", frame=self.transactframe)
        frequent_contact_title.raise_()

        # Transaction lineedit
        self.init_text('transact title', 'Transaction', [20, 30, 250, 50], "font-size:30pt;font-family:Aqua Grotesque",
                       frame=self.transact_subframe)
        lineedit_style = "background-color:white;color=black;border-radius:5px;"
        self.from_linelist_transaction = []
        self.to_linelist_transaction = []
        text_list = [['From customer', 'To customer'], ['From account', 'To account'], ['Currency Type', 'Amount']]
        initial_height=80
        leftgap = 20
        linegap = 100
        columngap = 270
        sub_linegap = 25
        account_list=[item[0] for item in accountList(self.customer_id)]
        for j in range(3):
            self.init_text('transact_text', text_list[j][0], [leftgap, initial_height + linegap * j, 200, 30],
                           "font-size:20pt;font-family:Avenir",
                           frame=self.transact_subframe)
            self.init_text('transact_text', text_list[j][1], [leftgap+columngap, initial_height + linegap * j, 200, 30],
                           "font-size:20pt;font-family:Avenir",
                           frame=self.transact_subframe)
            if  text_list[j][0]=='Currency Type':
                lineedit3 = QComboBox(self.transact_subframe)
                lineedit3.setGeometry(QtCore.QRect(leftgap, initial_height + sub_linegap + j * linegap, 200, 50))
                lineedit3.setStyleSheet(lineedit_style + "selection-color: blue")
                lineedit3.addItems(['HKD', 'US Dollar', 'Pound', 'Yuan'])
                lineedit3.setInsertPolicy(QComboBox.NoInsert)
            elif text_list[j][0]=='From account':
                lineedit3 = QComboBox(self.transact_subframe)
                lineedit3.setGeometry(QtCore.QRect(leftgap, initial_height + sub_linegap + j * linegap, 200, 50))
                lineedit3.setStyleSheet(lineedit_style + "selection-color: blue")
                lineedit3.addItems(account_list)
                lineedit3.setInsertPolicy(QComboBox.NoInsert)
            else:
                lineedit3 = QLineEdit(self.transact_subframe)
                lineedit3.setGeometry(QtCore.QRect(leftgap, initial_height + sub_linegap + j * linegap, 200, 50))
                lineedit3.setStyleSheet(lineedit_style)


            lineedit4 = QLineEdit(self.transact_subframe)
            lineedit4.setGeometry(QtCore.QRect(leftgap+columngap, initial_height +sub_linegap+j * linegap, 200, 50))
            lineedit4.setStyleSheet(lineedit_style)
            self.from_linelist_transaction.append(lineedit3)
            self.to_linelist_transaction.append(lineedit4)
        transact_button=self.ClickLabel(self.transact_subframe)
        offset=-20
        transact_button.setGeometry(QtCore.QRect(leftgap+0.95*200,initial_height+sub_linegap+(j+1)*linegap+offset,100,61.8))
        transact_button.setText('Transact')
        transact_button.setStyleSheet("background-color:rgb(88,178,220);border-radius:5px;color:black;qproperty-alignment:AlignCenter;font-weight:bold;font-family:Avenir;font-size:20pt")
        transact_button.clicked.connect(self.transaction)
        self.from_linelist_transaction[0].setText(self.customer_id)

        #setup transaction search

        # self.init_text('transact search title', 'Transaction Search', [20, 30, 250, 50], "font-size:30pt;font-family:Aqua Grotesque",
        #                frame=self.transact_subframe)
        lineedit_style = "background-color:white;color=black;border-radius:5px;"

        self.from_linelist_transactionsearch = []
        self.to_linelist_transactionsearch = []
        text_list = [['Search Type','Search Value']]
        initial_height = 460
        leftgap = 20
        linegap = 100
        columngap = 270
        sub_linegap = 25
        for j in range(1):
            self.init_text('transact_text', text_list[j][0], [leftgap, initial_height + linegap * j, 200, 30],
                           "font-size:20pt;font-family:Avenir",
                           frame=self.transact_subframe)
            self.init_text('transact_text', text_list[j][1],
                           [leftgap + columngap, initial_height + linegap * j, 200, 30],
                           "font-size:20pt;font-family:Avenir",
                           frame=self.transact_subframe)
            lineedit5 = QComboBox(self.transact_subframe)
            lineedit5.setGeometry(QtCore.QRect(leftgap, initial_height + sub_linegap + j * linegap, 200, 50))
            lineedit5.setStyleSheet(lineedit_style+"selection-color: blue")
            lineedit5.addItems(['timepoint_date', 'transaction_id', 'amount','account_id','time_period'])
            lineedit5.setInsertPolicy(QComboBox.NoInsert)
            lineedit6 = QLineEdit(self.transact_subframe)
            lineedit6.setGeometry(
                QtCore.QRect(leftgap + columngap, initial_height + sub_linegap + j * linegap, 200, 50))
            lineedit6.setStyleSheet(lineedit_style)
            self.from_linelist_transactionsearch.append(lineedit5)
            self.to_linelist_transactionsearch.append(lineedit6)

        transact_lookup_button = self.ClickLabel(self.transact_subframe)
        offset = -20
        transact_lookup_button.setGeometry(
            QtCore.QRect(leftgap + 0.95 * 200, initial_height + sub_linegap + (j + 1) * linegap + offset, 100, 61.8))
        transact_lookup_button.setText('Lookup')
        transact_lookup_button.setStyleSheet(
            "background-color:rgb(88,178,220);border-radius:5px;color:black;qproperty-alignment:AlignCenter;font-weight:bold;font-family:Avenir;font-size:20pt")
        transact_lookup_button.clicked.connect(partial(self.lookup_transaction,self.from_linelist_transactionsearch[0],self.to_linelist_transactionsearch[0]))


        

        #setup recent contact profile images
        contactlist_all=recentContect(self.customer_id)
        contactlist_customer=[]
        for i in range(len(contactlist_all)):
            contactlist_customer.append(contactlist_all[i][1])
        # include recent contact photos
        count=0
        userphoto_list=[]
        contact_accountlist=[]

        for i in contactlist_customer:
            count+=1
            if count<=3:
                userphoto = self.ClickLabel(self.transactframe)
                path="./user-photo/"+i+"_photo.png"
                if os.path.isfile(path):
                    im = QPixmap(path)
                else:
                    im=QPixmap("./user-photo/unknown_user.png")
                userphoto.setPixmap(im)
                userphoto.setGeometry(QtCore.QRect(250, 120 + 220* (count-1), 170, 170))
                userphoto.setScaledContents(True)
                userphoto.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)
                userphoto.clicked.connect(partial(self.fillinfo,i,contactlist_all[count-1][0]))
                userphoto_list.append(userphoto)
                contact_account=self.ClickLabel(self.transactframe)
                contact_account.setGeometry(QtCore.QRect(250, 180+110 + 220* (count-1), 200, 40))
                contact_account.setText(getFirstname(i)+" "+getSurname(i)+" "+str(i)+"-Account "+str(contactlist_all[count-1][0]))
                contact_account.clicked.connect(partial(self.fillinfo,i,contactlist_all[count-1][0],))


        for i in range(len(self.transact_subframe.children())):
            self.transact_subframe.children()[i].show()

        for i in range(len(self.transactframe.children())):
            self.transactframe.children()[i].show()
        hint = self.init_text('transact_hint', '(for time_period search please input: \n yyyy-mm-dd~yyyy-mm-dd)',
                              [leftgap, initial_height + sub_linegap + j * linegap + 50, 220, 50],
                              "font-size:12pt;font-family:Avenir;qproperty-alignment:AlignLeft",
                              frame=self.transact_subframe)
        hint.show()
        hint.raise_()
            


    def setup_profilepage(self):
        gc.collect()
        #setup profile frame mainframe
        self.mainframe.hide()
        self.transactframe.hide()
        self.accountframe.hide()
        self.analysisframe.hide()
        self.profileframe.show()
        for i in range(len(self.profileframe.children())):
            try:
                self.profileframe.children()[i].clear()
            except:
                x = 1
        self.profileframe.setGeometry(QtCore.QRect(210, 40, 1161, 771))
        self.profileframe.setAutoFillBackground(False)
        self.profileframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.profileframe.setFrameShadow(QtWidgets.QFrame.Raised)
        self.profileframe.setObjectName("accountframe")
        self.profileframe.setStyleSheet(
            "background-color:white;border-radius:23px;qproperty-alignment:AlignCenter;font-weight:bold;")
        shadow_main = QGraphicsDropShadowEffect()
        shadow_main.setBlurRadius(10)
        shadow_main.setOffset(5)
        self.profileframe.setGraphicsEffect(shadow_main)
        self.profileframe.show()
        self.frame.raise_()
        #setup profile subframe
        self.profile_subframe = QtWidgets.QFrame(self.profileframe)
        self.profile_subframe.setGeometry(QtCore.QRect(220, 80, 900, 620))
        self.profile_subframe.setAutoFillBackground(False)
        self.profile_subframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.profile_subframe.setFrameShadow(QtWidgets.QFrame.Raised)
        self.profile_subframe.setObjectName("profile_subframe")
        self.profile_subframe.setStyleSheet("background-color:#7cc6ca;border-radius:30px;")
        shadow_main = QGraphicsDropShadowEffect()
        shadow_main.setBlurRadius(5)
        shadow_main.setOffset(5)
        self.profile_subframe.setGraphicsEffect(shadow_main)

        #setup profile update part
        lineedit_style = "background-color:white;color=black;border-radius:5px;"
        from_linelist = []
        to_linelist = []
        text_list = [['Firstname', 'Surname'], ['Gender', 'Birthday(YYYY-MM-DD)'], ['Phone Number', 'Email'],['Certification Type','Certificate ID']]
        columns=["lastname","firstname","gender","birthday","email","phone","certification_type","id_number"]
        variabledic = {'Firstname': 'firstname', 'Surname': 'lastname', 'Gender': 'gender',
                       'Birthday(YYYY-MM-DD)': 'birthday', 'Email': 'email',
                       'Phone Number': 'phone', 'Certification Type': 'certification_type',
                       'Certificate ID': 'id_number'}
        original_values=pd.DataFrame(list(loadInfo(self.customer_id)[0][1:-1]),index=columns).T
        for j in range(len(text_list)):
            differ=30
            gap=80
            lineedit3 = QLineEdit(self.profile_subframe)
            self.init_text('profile_text', text_list[j][0], [20+differ, 120+ gap * j, 350, 30],
                           "font-size:20pt;font-family:Avenir;qproperty-alignment:AlignLeft",
                           frame=self.profile_subframe)
            self.init_text('profile_text', text_list[j][1], [280+differ, 120 + gap * j, 350, 30],
                           "font-size:20pt;font-family:Avenir;qproperty-alignment:AlignLeft",
                           frame=self.profile_subframe)
            lineedit3.setGeometry(QtCore.QRect(20+differ, 150 + j * gap, 200, 35))
            lineedit3.setStyleSheet(lineedit_style)

            lineedit3.setText(str(original_values[variabledic[text_list[j][0]]].iloc[0]))
            lineedit4 = QLineEdit(self.profile_subframe)
            lineedit4.setGeometry(QtCore.QRect(280+differ, 150 + j * gap, 200, 35))
            lineedit4.setStyleSheet(lineedit_style)
            lineedit4.setText(str(original_values[variabledic[text_list[j][1]]].iloc[0]))
            from_linelist.append(lineedit3)
            to_linelist.append(lineedit4)
        profile_button = self.ClickLabel(self.profile_subframe)
        profile_button.setGeometry(QtCore.QRect(250 + differ+300, 145 + j * gap,300, 50))
        profile_button.setText('Update Profile')
        import warnings
        warnings.filterwarnings('ignore')
        profile_button.setStyleSheet(
            "background-color:#65d8b1;border-radius:5px;color:black;qproperty-alignment:AlignCenter;font-weight:bold;font-family:Avenir;font-size:20pt")
        # profile_button.clicked.connect(self.setup_profilepage)
        userphoto_profilepage = self.ClickLabel(self.profile_subframe)
        userphoto_profilepage.setGeometry(QtCore.QRect(600, 100, 230, 230))
        userphoto_profilepage.setScaledContents(True)
        userphoto_profilepage.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)
        path="./user-photo/" + self.customer_id + "_photo.png"
        if os.path.isfile(path):
            im = QPixmap(path)
        else:
            im = QPixmap("./user-photo/unknown_user.png")
        userphoto_profilepage.setPixmap(im)
        userphoto_profilepage.clicked.connect(self.changeprofilephoto)
        userphoto_profilepage.raise_()
        update_profile_title = self.init_text('update_profile', 'Profile Update', [30, 50, 300, 35],
                                                "font-size:35px; font-family:Aqua Grotesque;", frame=self.profile_subframe)
        profile_button.clicked.connect(partial(self.update_profile,from_linelist,to_linelist,text_list))

        

        #reset password part
        j=4
        self.init_text('profile_text', 'Old Password', [20 + differ, 120 + gap * j, 350, 50],
                       "font-size:20pt;font-family:Avenir;qproperty-alignment:AlignLeft",
                       frame=self.profile_subframe)
        self.init_text('profile_text', 'New Password', [280 + differ, 120 + gap * j, 350, 50],
                       "font-size:20pt;font-family:Avenir;qproperty-alignment:AlignLeft",
                       frame=self.profile_subframe)
        lineedit_oldpasswd = QLineEdit(self.profile_subframe)
        lineedit_oldpasswd.setGeometry(QtCore.QRect(20 + differ, 150 + j * gap, 200, 35))
        lineedit_oldpasswd.setStyleSheet(lineedit_style)
        lineedit_newpasswd = QLineEdit(self.profile_subframe)
        lineedit_newpasswd.setGeometry(QtCore.QRect(280 + differ, 150 + j * gap, 200, 35))
        lineedit_newpasswd.setStyleSheet(lineedit_style)
        password_reset_button = self.ClickLabel(self.profile_subframe)
        password_reset_button.setGeometry(QtCore.QRect(250 + differ+300, 145 + j * gap, 300, 50))
        password_reset_button.setText('Update Password')
        password_reset_button.setStyleSheet("background-color:#65d8b1;border-radius:5px;color:black;qproperty-alignment:AlignCenter;font-weight:bold;font-family:Avenir;font-size:20pt")
        password_reset_button.clicked.connect(partial(self.reset_password,lineedit_oldpasswd,lineedit_newpasswd))
        for i in range(len(self.profileframe.children())):
            self.profileframe.children()[i].show()
        
            


    def setup_analysispage(self):
        gc.collect()
        self.mainframe.hide()
        self.transactframe.hide()
        self.accountframe.hide()
        self.profileframe.hide()
        self.analysisframe.show()
        self.analysisframe.setGeometry(QtCore.QRect(210, 40, 1161, 771))
        self.analysisframe.setAutoFillBackground(False)
        self.analysisframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.analysisframe.setFrameShadow(QtWidgets.QFrame.Raised)
        self.analysisframe.setObjectName("accountframe")
        self.analysisframe.setStyleSheet("background-color:white;border-radius:23px;qproperty-alignment:AlignCenter;font-weight:bold;")
        shadow_main = QGraphicsDropShadowEffect()
        shadow_main.setBlurRadius(10)
        shadow_main.setOffset(5)
        self.analysisframe.setGraphicsEffect(shadow_main)
        self.analysisframe.show()
        self.frame.raise_()
        
        def analysis_1_draw(customer_id):
            df_list = analyze1(customer_id)
            df=pd.DataFrame(df_list[2],index=pd.Series(df_list[1]).apply(lambda x:'-'.join(list(x))),columns=df_list[0]).T
            df.index=pd.Series(df.index).apply(lambda x:pd.to_datetime(x,format='%Y-%m'))
            df.sort_index(inplace=True)
            df = df.pct_change()
            plt.rcParams.update({'font.size': 20})
            fig = plt.figure(figsize=(18, 12), dpi=100)
            ax = fig.add_subplot(111)
            plt.plot(df, label=df.columns,linewidth=7)
            plt.legend()
            hfont = {'fontname': 'Myriad Pro'}
            plt.grid()
            plt.title('Account Monthly Change', **hfont, fontsize=40)
            plt.xlabel('Date', **hfont, fontsize=30)
            plt.ylabel('Monthly Change %', **hfont, fontsize=30)
            ax.yaxis.set_major_formatter(mtick.PercentFormatter())
            plt.savefig("./temp_image/balance_trend/" + str(self.customer_id) + "_analysis_1.jpg", dpi=100)
            plt.close(fig)
        def analysis_2_draw(customer_id):
            df_list = analyze2(customer_id)
            df = pd.DataFrame(df_list[2], index=pd.Series(df_list[1]).apply(lambda x: '-'.join(list(x))))
            plt.rcParams.update({'font.size': 20})
            fig = plt.figure(figsize=(18, 12), dpi=100)
            ax = fig.add_subplot(111)
            plt.bar(df.index, df[0], width=0.5)
            plt.legend()
            hfont = {'fontname': 'Myriad Pro'}
            plt.grid()
            plt.title('Annual Net Flow of Accounts', **hfont, fontsize=40)
            plt.xlabel('Accounts', **hfont, fontsize=30)
            plt.ylabel('Annual Net Flow', **hfont, fontsize=30)
            # ax.yaxis.set_major_formatter(mtick.PercentFormatter())
            plt.savefig("./temp_image/balance_trend/" + str(self.customer_id) + "_analysis_2.jpg", dpi=100)
            plt.close(fig)
        def analysis_3_draw(customer_id):
            df_list = analyze3(customer_id)
            df = pd.DataFrame(df_list[1], index=pd.Series(df_list[0]))
            df /= df.sum()
            def make_autopct(values):
                def my_autopct(pct):
                    total = sum(values)
                    val = int(round(pct * total / 100.0))
                    return '{p:.2f}% '.format(p=pct, v=val)
                return my_autopct
            fig = plt.figure(figsize=(18, 12), dpi=100)
            plt.rcParams.update({'font.size': 30})
            ax = fig.add_subplot(111)
            plt.pie(df[0], labels=df.index, autopct=make_autopct(df[0]))
            hfont = {'fontname': 'Myriad Pro'}
            plt.title('Balance Percentage', **hfont, fontsize=35)
            plt.savefig("./temp_image/balance_trend/" + str(self.customer_id) + "_analysis_3.jpg", dpi=100)
    
        # only generate image for a user once
        while (self.run_once_analysis < 1):
            try:
                analysis_2_draw(self.customer_id)
                analysis_1_draw(self.customer_id)
                analysis_3_draw(self.customer_id)
                self.run_once_analysis += 1
            except Exception as e:
                self.run_once_analysis += 1
                print('failure in painting balance trend, error is '+str(e))
        try:
            im1 = QPixmap("./temp_image/balance_trend/" + str(self.customer_id) + "_analysis_1.jpg")
            im2 = QPixmap("./temp_image/balance_trend/" + str(self.customer_id) + "_analysis_2.jpg")
            im3 = QPixmap("./temp_image/balance_trend/" + str(self.customer_id) + "_analysis_3.jpg")

        except:
            analysis_1_draw(self.customer_id)
            analysis_2_draw(self.customer_id)
            analysis_3_draw(self.customer_id)
            im1 = QPixmap("./temp_image/balance_trend/" + str(self.customer_id) + "_analysis_1.jpg")
            im2 = QPixmap("./temp_image/balance_trend/" + str(self.customer_id) + "_analysis_2.jpg")
            im3 = QPixmap("./temp_image/balance_trend/" + str(self.customer_id) + "_analysis_3.jpg")
        analysis_1_image = QtWidgets.QLabel(self.analysisframe)
        x_length=200
        y_length=50
        figure_width=530
        figure_height=figure_width*4/6
        figure_ygap=figure_height

        analysis_1_image.setGeometry(QtCore.QRect(x_length, y_length, figure_width, figure_height))
        analysis_1_image.setScaledContents(True)
        analysis_1_image.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)
        analysis_2_image = QtWidgets.QLabel(self.analysisframe)
        analysis_2_image.setGeometry(QtCore.QRect(x_length, y_length + figure_ygap, figure_width, figure_height))
        analysis_2_image.setScaledContents(True)
        analysis_2_image.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)
        analysis_3_image = QtWidgets.QLabel(self.analysisframe)
        analysis_3_image.setGeometry(QtCore.QRect(x_length+450, y_length+figure_ygap+20, figure_width, figure_height))
        analysis_3_image.setScaledContents(True)
        analysis_3_image.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)
        analysis_1_image.setPixmap(im1.scaled(3600, 2400, Qt.IgnoreAspectRatio))
        analysis_1_image.setWindowFlag(Qt.FramelessWindowHint)
        analysis_1_image.setAttribute(Qt.WA_NoSystemBackground)
        analysis_1_image.setAttribute(Qt.WA_TranslucentBackground)
        analysis_2_image.setPixmap(im2.scaled(3600, 2400, Qt.IgnoreAspectRatio))
        analysis_2_image.setWindowFlag(Qt.FramelessWindowHint)
        analysis_2_image.setAttribute(Qt.WA_NoSystemBackground)
        analysis_2_image.setAttribute(Qt.WA_TranslucentBackground)
        analysis_3_image.setPixmap(im3.scaled(3600, 2400, Qt.IgnoreAspectRatio))
        analysis_3_image.setWindowFlag(Qt.FramelessWindowHint)
        analysis_3_image.setAttribute(Qt.WA_NoSystemBackground)
        analysis_3_image.setAttribute(Qt.WA_TranslucentBackground)
        analysis_2_image.raise_()
        analysis_1_image.raise_()
        userphoto_analysis = self.ClickLabel(self.analysisframe)
        userphoto_analysis.setGeometry(QtCore.QRect(830, 100, 250, 250))
        userphoto_analysis.setScaledContents(True)
        userphoto_analysis.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)
        path="./user-photo/" + self.customer_id + "_photo.png"
        if os.path.isfile(path):
            im_userphoto = QPixmap(path)
        else:
            im_userphoto = QPixmap("./user-photo/unknown_user.png")
        userphoto_analysis.setPixmap(im_userphoto)
        userphoto_analysis.clicked.connect(self.setup_profilepage)

        for i in range(len(self.analysisframe.children())):
            self.analysisframe.children()[i].show()
        analysis_1_image.raise_()





    #Utility functions
    def fillinfo(self,a,b):
        self.to_linelist_transaction[0].setText(a)
        self.to_linelist_transaction[1].setText(b)
    def reset_password(self,oldpasswd_line,newpasswd_line):
        oldpasswd=oldpasswd_line.text()
        newpasswd=newpasswd_line.text()
        valid = updatePassword(self.customer_id, oldpasswd, newpasswd)
        dialog = QtWidgets.QDialog()
        dialog.setGeometry(QtCore.QRect(200, 200, 400, 200))
        text = QLabel(dialog)
        text.setGeometry(QtCore.QRect(0, 0, 400, 200))
        text.setStyleSheet(
            "font-size:25pt;font-family:Avenir;qproperty-alignment: 'AlignCenter | AlignCenter';"
            "qproperty-wordWrap:True")
        if valid:
            text.setText('Password reset completed!')
            dialog.exec_()
        else:
            text.setText('Sorry, \npassword reset failed. Please chceck old password. ')
            dialog.exec_()



    def update_profile(self,from_list,to_list,text_list):
        text_list = [['Firstname', 'Surname'], ['Gender', 'Birthday(YYYY-MM-DD)'], ['Phone Number', 'Email'],
                     ['Certification Type', 'Certificate ID']]
        columns = ["lastname", "firstname", "gender", "birthday", "email", "phone", "certification_type", "id_number"]
        variabledic = {'Firstname': 'firstname', 'Surname': 'lastname', 'Gender': 'gender',
                       'Birthday(YYYY-MM-DD)': 'birthday', 'Email': 'email',
                       'Phone Number': 'phone', 'Certification Type': 'certification_type',
                       'Certificate ID': 'id_number'}
        for i in range(len(text_list)):
            for j in [0,1]:
                if j==0:
                    update_value=from_list[i].text()
                else:
                    update_value=to_list[i].text()
                updateInfo(self.customer_id, variabledic[text_list[i][j]], update_value)
        dialog = QtWidgets.QDialog()
        dialog.setGeometry(QtCore.QRect(200, 200, 400, 200))
        text = QLabel(dialog)
        text.setGeometry(QtCore.QRect(0, 0, 400, 200))
        text.setStyleSheet(
            "font-size:25pt;font-family:Avenir;qproperty-alignment: 'AlignCenter | AlignCenter';qproperty-wordWrap:True")
        text.setText('Update Completed!')
        dialog.exec_()

    def lookup_transaction(self,lookup_type_list,lookup_value_list):
        lookup_type=lookup_type_list.currentText()
        lookup_value=lookup_value_list.text()
        if lookup_type=='time_period':
            lookup_value=lookup_value.split('~')
        try:
            df=pd.DataFrame(searchTransaction(self.customer_id,lookup_type,lookup_value),columns=['Transaction Id','To Account','From Account','Amount','Currency Type','Time'])
            class DataFrameModel(QtCore.QAbstractTableModel):
                DtypeRole = QtCore.Qt.UserRole + 1000
                ValueRole = QtCore.Qt.UserRole + 1001

                def __init__(self, df=pd.DataFrame(), parent=None):
                    super(DataFrameModel, self).__init__(parent)
                    self._dataframe = df

                def setDataFrame(self, dataframe):
                    self.beginResetModel()
                    self._dataframe = dataframe.copy()
                    self.endResetModel()

                def dataFrame(self):
                    return self._dataframe

                dataFrame = QtCore.pyqtProperty(pd.DataFrame, fget=dataFrame, fset=setDataFrame)

                @QtCore.pyqtSlot(int, QtCore.Qt.Orientation, result=str)
                def headerData(self, section: int, orientation: QtCore.Qt.Orientation, role: int = QtCore.Qt.DisplayRole):
                    if role == QtCore.Qt.DisplayRole:
                        if orientation == QtCore.Qt.Horizontal:
                            return self._dataframe.columns[section]
                        else:
                            return str(self._dataframe.index[section])
                    return QtCore.QVariant()

                def rowCount(self, parent=QtCore.QModelIndex()):
                    if parent.isValid():
                        return 0
                    return len(self._dataframe.index)

                def columnCount(self, parent=QtCore.QModelIndex()):
                    if parent.isValid():
                        return 0
                    return self._dataframe.columns.size

                def data(self, index, role=QtCore.Qt.DisplayRole):
                    if not index.isValid() or not (0 <= index.row() < self.rowCount() \
                                                   and 0 <= index.column() < self.columnCount()):
                        return QtCore.QVariant()
                    row = self._dataframe.index[index.row()]
                    col = self._dataframe.columns[index.column()]
                    dt = self._dataframe[col].dtype

                    val = self._dataframe.iloc[row][col]
                    if role == QtCore.Qt.DisplayRole:
                        return str(val)
                    elif role == DataFrameModel.ValueRole:
                        return val
                    if role == DataFrameModel.DtypeRole:
                        return dt
                    return QtCore.QVariant()

                def roleNames(self):
                    roles = {
                        QtCore.Qt.DisplayRole: b'display',
                        DataFrameModel.DtypeRole: b'dtype',
                        DataFrameModel.ValueRole: b'value'
                    }
                    return roles
            model = DataFrameModel(df)
            dialog = QtWidgets.QDialog()
            dialog.setGeometry(QtCore.QRect(200, 200, 800, 500))
            tableView = QtWidgets.QTableView(dialog)
            tableView.setGeometry(QtCore.QRect(0, 0, 800, 500))
            tableView.setObjectName("tableView")
            tableView.setModel(model)
            sizePol = QSizePolicy()
            sizePol.setVerticalPolicy(QSizePolicy.Maximum)
            sizePol.setHorizontalPolicy(QSizePolicy.Maximum)
            tableView.setSizePolicy(sizePol)
            dialog.exec_()
        except Exception as e:
            dialog = QtWidgets.QDialog()
            dialog.setGeometry(QtCore.QRect(200, 200, 400, 200))
            text = QLabel(dialog)
            text.setGeometry(QtCore.QRect(0, 0, 400, 200))
            text.setStyleSheet(
                "font-size:25pt;font-family:Avenir;qproperty-alignment: 'AlignCenter | AlignCenter';qproperty-wordWrap:True")
            text.setText(str(e))
            dialog.exec_()
    def frame_popup(self,df, QMouseEvent):
        class DataFrameModel(QtCore.QAbstractTableModel):
            DtypeRole = QtCore.Qt.UserRole + 1000
            ValueRole = QtCore.Qt.UserRole + 1001

            def __init__(self, df=pd.DataFrame(), parent=None):
                super(DataFrameModel, self).__init__(parent)
                self._dataframe = df

            def setDataFrame(self, dataframe):
                self.beginResetModel()
                self._dataframe = dataframe.copy()
                self.endResetModel()

            def dataFrame(self):
                return self._dataframe

            dataFrame = QtCore.pyqtProperty(pd.DataFrame, fget=dataFrame, fset=setDataFrame)

            @QtCore.pyqtSlot(int, QtCore.Qt.Orientation, result=str)
            def headerData(self, section: int, orientation: QtCore.Qt.Orientation, role: int = QtCore.Qt.DisplayRole):
                if role == QtCore.Qt.DisplayRole:
                    if orientation == QtCore.Qt.Horizontal:
                        return self._dataframe.columns[section]
                    else:
                        return str(self._dataframe.index[section])
                return QtCore.QVariant()

            def rowCount(self, parent=QtCore.QModelIndex()):
                if parent.isValid():
                    return 0
                return len(self._dataframe.index)

            def columnCount(self, parent=QtCore.QModelIndex()):
                if parent.isValid():
                    return 0
                return self._dataframe.columns.size

            def data(self, index, role=QtCore.Qt.DisplayRole):
                if not index.isValid() or not (0 <= index.row() < self.rowCount() \
                                               and 0 <= index.column() < self.columnCount()):
                    return QtCore.QVariant()
                row = self._dataframe.index[index.row()]
                col = self._dataframe.columns[index.column()]
                dt = self._dataframe[col].dtype

                val = self._dataframe.iloc[row][col]
                if role == QtCore.Qt.DisplayRole:
                    return str(val)
                elif role == DataFrameModel.ValueRole:
                    return val
                if role == DataFrameModel.DtypeRole:
                    return dt
                return QtCore.QVariant()

            def roleNames(self):
                roles = {
                    QtCore.Qt.DisplayRole: b'display',
                    DataFrameModel.DtypeRole: b'dtype',
                    DataFrameModel.ValueRole: b'value'
                }
                return roles
        model = DataFrameModel(df)
        dialog = QtWidgets.QDialog()
        dialog.setGeometry(QtCore.QRect(200, 200, 800, 500))
        tableView = QtWidgets.QTableView(dialog)
        tableView.setGeometry(QtCore.QRect(0, 0, 800, 500))
        tableView.setObjectName("tableView")
        tableView.setModel(model)
        sizePol = QSizePolicy()
        sizePol.setVerticalPolicy(QSizePolicy.Maximum)
        sizePol.setHorizontalPolicy(QSizePolicy.Maximum)
        tableView.setSizePolicy(sizePol)
        dialog.exec_()

    def transaction(self):
        try:
            transaction_id,valid=makeTransaction(self.to_linelist_transaction[1].text(),self.from_linelist_transaction[1].currentText(),self.to_linelist_transaction[0].text(),self.from_linelist_transaction[0].text(),
                            float(self.to_linelist_transaction[2].text()),self.from_linelist_transaction[2].currentText())
        except Exception as e:
            valid=False
            transaction_id=str(e)

            if str(transaction_id)=='could not convert string to float: ':
                transaction_id='Please check if any blanks are left/if all input type are right'
        dialog = QtWidgets.QDialog()
        dialog.setGeometry(QtCore.QRect(200, 200, 400,200))
        text = QLabel(dialog)
        text.setGeometry(QtCore.QRect(0, 0, 400, 200))
        text.setStyleSheet("font-size:25pt;font-family:Avenir;qproperty-alignment: 'AlignCenter | AlignCenter';qproperty-wordWrap:True")
        if valid:
            text.setText('Transaction Completed! \n Transaction ID:'+str(transaction_id))
            dialog.exec_()
        else:
            text.setText('Transaction Failed, \n'+'error message is: \n'+str(transaction_id))
            dialog.exec_()
    def logout(self):
        quit()

    def changeprofilephoto(self):
        try:
            self.openpath = QFileDialog.getOpenFileName(self, 'Open a file', '',
                                           'All Files (*.*)')[0]
            shutil.copy2(str(self.openpath), './user-photo/' + self.customer_id + '.jpg')
            from Utils import cropping
            cropping(self.customer_id)
            self.setup_profilepage()
        except Exception as e:
            dialog = QtWidgets.QDialog()
            dialog.setGeometry(QtCore.QRect(200, 200, 400, 200))
            text = QLabel(dialog)
            text.setGeometry(QtCore.QRect(0, 0, 400, 200))
            text.setStyleSheet(
                "font-size:25pt;font-family:Avenir;qproperty-alignment: 'AlignCenter | AlignCenter';"
                "qproperty-wordWrap:True")
            text.setText('Upload Not Completed.\n'+str(e))
            dialog.exec_()










class Main(QMainWindow, Ui_MainWindow):
    def __init__(self,customer_id):
        super().__init__(customer_id=customer_id)
        self.setupUi(self)
        self.setWindowTitle("RTM Bank Client")



if __name__ == '__main__':
    from UIKernel import UIKernel
    import sys
    app=QtWidgets.QApplication(sys.argv)
    UIKernelWindow=UIKernel()
    app.exec_()
    if UIKernelWindow.validate==1:
        window = Main(UIKernelWindow.username)
        window.show()
        sys.exit(app.exec_())
    else:
        quit()


